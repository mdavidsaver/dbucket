
import unittest

from ..xcode import _next_type, encode, decode, Object, Signature, Variant

class TestXCode(unittest.TestCase):
    
    # [('sig', [struct], b'serialized')]
    data = [
        (b'y', 97, b'a'),
        (b'yy', (97, 98), b'ab'),
        (b'b', 0x61626364, b'dcba'),
        # int is aligned to 4 bytes
        (b'yb', (ord('e'), 0x61626364), b'e\x00\x00\x00dcba'),
        # struct is aligned to 8 bytes
        (b'y(yy)', (97, (98, 99)), b'a\x00\x00\x00\x00\x00\x00\x00bc'),
        (b'bayb', (1633837924, [49, 50, 51, 52], 1633837924),
                  b'dcba\x04\x00\x00\x001234dcba'),
        # array
        (b'yayb', (99, [49, 50, 51, 52], 1633837924),
                  b'c\x00\x00\x00\x04\x00\x00\x001234dcba'),

        # Message body w/ string only
        (b's', 'No one cared', b'\x0c\x00\x00\x00No one cared\x00'),

        # Hello method call
        (b'yyyyuua(yv)',
           (108, 1, 0, 1, 0, 1, [(1, Object('/org/freedesktop/DBus')), (6, 'org.freedesktop.DBus'), (2, 'org.freedesktop.DBus'), (3, 'Hello')]),
           b'l\x01\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00n\x00\x00\x00\x01\x01o\x00\x15\x00\x00\x00/org/freedesktop/DBus\x00\x00\x00\x06\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00\x00\x00\x00\x02\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00\x00\x00\x00\x03\x01s\x00\x05\x00\x00\x00Hello\x00'
        ),
        # big array from UPower
        (b'a(udu)',
          [(1478045962, 6.961, 2), (1478045842, 7.258, 2), (1478045722, 6.867, 2), (1478045602, 7.099, 2), (1478045482, 7.004, 2), (1478045362, 7.017, 2), (1478045242, 6.942, 2), (1478045122, 7.319, 2), (1478045002, 7.067, 2), (1478044882, 7.24, 2), (1478044762, 6.956, 2), (1478044642, 7.333, 2), (1478044522, 6.614, 2), (1478044402, 6.848, 2), (1478044326, 7.08, 2), (1478044282, 7.144, 2), (1478044162, 6.683, 2), (1478044042, 6.706, 2), (1478043922, 6.682, 2), (1478043802, 6.524, 2), (1478043682, 6.678, 2), (1478043562, 6.635, 2), (1478043442, 6.589, 2), (1478043321, 6.813, 2), (1478043201, 6.753, 2), (1478043081, 6.761, 2), (1478042961, 6.934, 2), (1478042841, 7.039, 2), (1478042721, 6.731, 2), (1478042601, 6.806, 2)],
          b'\xcc\x02\x00\x00\x00\x00\x00\x00\n1\x19X\x00\x00\x00\x00\xf2\xd2Mb\x10\xd8\x1b@\x02\x00\x00\x00\x00\x00\x00\x00\x920\x19X\x00\x00\x00\x00\xd5x\xe9&1\x08\x1d@\x02\x00\x00\x00\x00\x00\x00\x00\x1a0\x19X\x00\x00\x00\x00+\x87\x16\xd9\xcew\x1b@\x02\x00\x00\x00\x00\x00\x00\x00\xa2/\x19X\x00\x00\x00\x00L7\x89A`e\x1c@\x02\x00\x00\x00\x00\x00\x00\x00*/\x19X\x00\x00\x00\x00j\xbct\x93\x18\x04\x1c@\x02\x00\x00\x00\x00\x00\x00\x00\xb2.\x19X\x00\x00\x00\x00\xc5 \xb0rh\x11\x1c@\x02\x00\x00\x00\x00\x00\x00\x00:.\x19X\x00\x00\x00\x00\xf8S\xe3\xa5\x9b\xc4\x1b@\x02\x00\x00\x00\x00\x00\x00\x00\xc2-\x19X\x00\x00\x00\x00-\xb2\x9d\xef\xa7F\x1d@\x02\x00\x00\x00\x00\x00\x00\x00J-\x19X\x00\x00\x00\x00\xf8S\xe3\xa5\x9bD\x1c@\x02\x00\x00\x00\x00\x00\x00\x00\xd2,\x19X\x00\x00\x00\x00\xf6(\\\x8f\xc2\xf5\x1c@\x02\x00\x00\x00\x00\x00\x00\x00Z,\x19X\x00\x00\x00\x00m\xe7\xfb\xa9\xf1\xd2\x1b@\x02\x00\x00\x00\x00\x00\x00\x00\xe2+\x19X\x00\x00\x00\x00\xa2E\xb6\xf3\xfdT\x1d@\x02\x00\x00\x00\x00\x00\x00\x00j+\x19X\x00\x00\x00\x00\xdb\xf9~j\xbct\x1a@\x02\x00\x00\x00\x00\x00\x00\x00\xf2*\x19X\x00\x00\x00\x001\x08\xac\x1cZd\x1b@\x02\x00\x00\x00\x00\x00\x00\x00\xa6*\x19X\x00\x00\x00\x00R\xb8\x1e\x85\xebQ\x1c@\x02\x00\x00\x00\x00\x00\x00\x00z*\x19X\x00\x00\x00\x00\xfa~j\xbct\x93\x1c@\x02\x00\x00\x00\x00\x00\x00\x00\x02*\x19X\x00\x00\x00\x00\x08\xac\x1cZd\xbb\x1a@\x02\x00\x00\x00\x00\x00\x00\x00\x8a)\x19X\x00\x00\x00\x00m\xe7\xfb\xa9\xf1\xd2\x1a@\x02\x00\x00\x00\x00\x00\x00\x00\x12)\x19X\x00\x00\x00\x00\xee|?5^\xba\x1a@\x02\x00\x00\x00\x00\x00\x00\x00\x9a(\x19X\x00\x00\x00\x00\x7fj\xbct\x93\x18\x1a@\x02\x00\x00\x00\x00\x00\x00\x00"(\x19X\x00\x00\x00\x00\x83\xc0\xca\xa1E\xb6\x1a@\x02\x00\x00\x00\x00\x00\x00\x00\xaa\'\x19X\x00\x00\x00\x00\n\xd7\xa3p=\x8a\x1a@\x02\x00\x00\x00\x00\x00\x00\x002\'\x19X\x00\x00\x00\x00B`\xe5\xd0"[\x1a@\x02\x00\x00\x00\x00\x00\x00\x00\xb9&\x19X\x00\x00\x00\x00\x8d\x97n\x12\x83@\x1b@\x02\x00\x00\x00\x00\x00\x00\x00A&\x19X\x00\x00\x00\x00P\x8d\x97n\x12\x03\x1b@\x02\x00\x00\x00\x00\x00\x00\x00\xc9%\x19X\x00\x00\x00\x00%\x06\x81\x95C\x0b\x1b@\x02\x00\x00\x00\x00\x00\x00\x00Q%\x19X\x00\x00\x00\x00#\xdb\xf9~j\xbc\x1b@\x02\x00\x00\x00\x00\x00\x00\x00\xd9$\x19X\x00\x00\x00\x00\x0e-\xb2\x9d\xef\'\x1c@\x02\x00\x00\x00\x00\x00\x00\x00a$\x19X\x00\x00\x00\x00\x06\x81\x95C\x8b\xec\x1a@\x02\x00\x00\x00\x00\x00\x00\x00\xe9#\x19X\x00\x00\x00\x00\xd3Mb\x10X9\x1b@\x02\x00\x00\x00',
        )
    ]
    
    def test_encode(self):
        for sig, inp, expect in self.data:
            actual = encode(sig, inp, lsb=True, debug=True)
            self.assertEqual(actual, expect)

    def test_decode(self):
        for sig, expect, inp in self.data:
            actual = decode(sig, inp, lsb=True, debug=True)
            self.assertEqual(actual, expect)

class TestEncode(unittest.TestCase):
    data = [
        # Hello method return
        (b'yyyyuua(yv)',
          (108, 2, 1, 1, 11, 1, [(6, ':1.336'), (5, Variant(b'u', 1)), (8, Signature('s')), (7, 'org.freedesktop.DBus')]),
          b'l\x02\x01\x01\x0b\x00\x00\x00\x01\x00\x00\x00=\x00\x00\x00\x06\x01s\x00\x06\x00\x00\x00:1.336\x00\x00\x05\x01u\x00\x01\x00\x00\x00\x08\x01g\x00\x01s\x00\x00\x07\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00'
        ),
        # NamedAcquired signal
        (b'yyyyuua(yv)',
          (108, 4, 1, 1, 11, 2, [(1, Object('/org/freedesktop/DBus')), (2, 'org.freedesktop.DBus'), (3, 'NameAcquired'), (6, ':1.336'), (8, Signature('s')), (7, 'org.freedesktop.DBus')]),
          b'l\x04\x01\x01\x0b\x00\x00\x00\x02\x00\x00\x00\x8d\x00\x00\x00\x01\x01o\x00\x15\x00\x00\x00/org/freedesktop/DBus\x00\x00\x00\x02\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00\x00\x00\x00\x03\x01s\x00\x0c\x00\x00\x00NameAcquired\x00\x00\x00\x00\x06\x01s\x00\x06\x00\x00\x00:1.336\x00\x00\x08\x01g\x00\x01s\x00\x00\x07\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00'
        ),
    ]

    def test_encode(self):
        for sig, inp, expect in self.data:
            actual = encode(sig, inp, lsb=True, debug=True)
            self.assertEqual(actual, expect)

class TestDecode(unittest.TestCase):
    data = [
        # Hello method return
        (b'yyyyuua(yv)',
          (108, 2, 1, 1, 11, 1, [(6, ':1.336'), (5, 1), (8, b's'), (7, 'org.freedesktop.DBus')]),
          b'l\x02\x01\x01\x0b\x00\x00\x00\x01\x00\x00\x00=\x00\x00\x00\x06\x01s\x00\x06\x00\x00\x00:1.336\x00\x00\x05\x01u\x00\x01\x00\x00\x00\x08\x01g\x00\x01s\x00\x00\x07\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00'
        ),
        # NamedAcquired signal
        (b'yyyyuua(yv)',
          (108, 4, 1, 1, 11, 2, [(1, '/org/freedesktop/DBus'), (2, 'org.freedesktop.DBus'), (3, 'NameAcquired'), (6, ':1.336'), (8, b's'), (7, 'org.freedesktop.DBus')]),
          b'l\x04\x01\x01\x0b\x00\x00\x00\x02\x00\x00\x00\x8d\x00\x00\x00\x01\x01o\x00\x15\x00\x00\x00/org/freedesktop/DBus\x00\x00\x00\x02\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00\x00\x00\x00\x03\x01s\x00\x0c\x00\x00\x00NameAcquired\x00\x00\x00\x00\x06\x01s\x00\x06\x00\x00\x00:1.336\x00\x00\x08\x01g\x00\x01s\x00\x00\x07\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00'
        ),
        # error
        (b'yyyyuua(yv)',
          (108, 3, 1, 1, 71, 3, [(6, ':1.376'), (4, 'org.freedesktop.DBus.Error.UnknownMethod'), (5, 2), (8, b's'), (7, 'org.freedesktop.DBus')]),
          b'l\x03\x01\x01G\x00\x00\x00\x03\x00\x00\x00u\x00\x00\x00\x06\x01s\x00\x06\x00\x00\x00:1.376\x00\x00\x04\x01s\x00(\x00\x00\x00org.freedesktop.DBus.Error.UnknownMethod\x00\x00\x00\x00\x00\x00\x00\x00\x05\x01u\x00\x02\x00\x00\x00\x08\x01g\x00\x01s\x00\x00\x07\x01s\x00\x14\x00\x00\x00org.freedesktop.DBus\x00'
        ), 
    ]

    def test_decode(self):
        for sig, expect, inp in self.data:
            actual = decode(sig, inp, lsb=True, debug=True)
            self.assertEqual(actual, expect)

class TestSigSplit(unittest.TestCase):
    def test_split(self):
        self.assertEqual(_next_type(b'y'), (b'y', b''))
        self.assertEqual(_next_type(b'yy'), (b'y', b'y'))
        self.assertEqual(_next_type(b'yyy'), (b'y', b'yy'))
        self.assertEqual(_next_type(b'ay'),  (b'ay', b''))
        self.assertEqual(_next_type(b'ayy'), (b'ay', b'y'))
        self.assertEqual(_next_type(b'yay'), (b'y', b'ay'))
        self.assertEqual(_next_type(b'a(ii)'), (b'a(ii)', b''))
        self.assertEqual(_next_type(b'a(ii)i'),(b'a(ii)', b'i'))
        self.assertEqual(_next_type(b'aaii'),  (b'aai', b'i'))
        self.assertEqual(_next_type(b'aa(ai(yay)i)i'), (b'aa(ai(yay)i)', b'i'))
